{"version":3,"sources":["Countdown.tsx","App.tsx","index.tsx"],"names":["Countdown","state","count","props","from","intervalId","this","setInterval","clearInterval","setState","prev","prevProps","className","React","Component","App","isStarted","limit","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"gMAWaA,EAAb,4MACEC,MAAQ,CACNC,MAAO,EAAKC,MAAMC,MAFtB,EAKEC,gBALF,yDAOE,WAAqB,IAAD,OAClBC,KAAKD,WAAaE,aAAY,WACxB,EAAKF,YAAmC,IAArB,EAAKJ,MAAMC,OAChCM,cAAc,EAAKH,YAGrB,EAAKI,UAAS,SAACC,GAAD,MAAW,CACvBR,MAAOQ,EAAKR,MAAQ,QAErB,OAhBP,gCAmBE,SAAmBS,GACbL,KAAKH,MAAMC,OAASO,EAAUP,MAEhCE,KAAKG,SAAS,CAAEP,MAAOI,KAAKH,MAAMC,SAtBxC,kCA0BE,WACME,KAAKD,YACPG,cAAcF,KAAKD,cA5BzB,oBAgCE,WACE,IAAQH,EAAUI,KAAKL,MAAfC,MAER,OACE,qBAAKU,UAAU,MAAf,SACE,4BAAIV,GAAS,gBArCrB,GAA+BW,IAAMC,WCD/BC,E,4MACJd,MAAQ,CACNe,WAAW,EACXC,MAAO,G,4CAGT,WAAU,IAAD,OACP,EAA6BX,KAAKL,MAA1Be,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAEnB,OACE,sBAAKL,UAAU,MAAf,UACE,6CACA,wBACEM,KAAK,SACLC,QAAS,WACP,EAAKV,SAAS,CACZO,WAAW,KAJjB,mBAWA,wBACEE,KAAK,SACLC,QAAS,WACP,EAAKV,SAAS,CACZO,WAAW,KAJjB,kBAWA,uBAEA,wBACEE,KAAK,SACLC,QAAS,kBAAM,EAAKV,SAAS,CAAEQ,MAAO,MAFxC,gBAOCD,GACC,cAAC,EAAD,CAAWZ,KAAMa,W,GA5CTJ,IAAMC,WA8DTC,ICrEfK,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.1886650e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\ninterface Props {\n  from: number;\n}\n\ninterface State {\n  count: number;\n}\n\nexport class Countdown extends React.Component<Props, State> {\n  state = {\n    count: this.props.from,\n  };\n\n  intervalId?: NodeJS.Timer;\n\n  componentDidMount() {\n    this.intervalId = setInterval(() => {\n      if (this.intervalId && this.state.count === 1) {\n        clearInterval(this.intervalId);\n      }\n\n      this.setState((prev) => ({\n        count: prev.count - 1,\n      }));\n    }, 1000);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.from !== prevProps.from) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ count: this.props.from });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  }\n\n  render() {\n    const { count } = this.state;\n\n    return (\n      <div className=\"App\">\n        <p>{count || 'Done!'}</p>\n\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\n\nimport { Countdown } from './Countdown';\n\ninterface State {\n  isStarted: boolean,\n  limit: number,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    isStarted: false,\n    limit: 5,\n  };\n\n  render() {\n    const { isStarted, limit } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n        <button\n          type=\"button\"\n          onClick={() => {\n            this.setState({\n              isStarted: true,\n            });\n          }}\n        >\n          Start\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => {\n            this.setState({\n              isStarted: false,\n            });\n          }}\n        >\n          Stop\n        </button>\n\n        <br />\n\n        <button\n          type=\"button\"\n          onClick={() => this.setState({ limit: 10 })}\n        >\n          10\n        </button>\n\n        {isStarted && (\n          <Countdown from={limit} />\n        )}\n      </div>\n    );\n  }\n}\n// const timerId: NodeJS.Timer = setInterval(() => {\n//   const date: Date = new Date();\n\n//   // eslint-disable-next-line\n//   console.log(date.toLocaleTimeString());\n// }, 1000);\n\n// eslint-disable-next-line\n  // console.log(timerId);\n\n// };\n\nexport default App;\n","import ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}